<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Angler</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed = 0;
hspeed = 0;
set_scale = 1/2;
image_xscale = set_scale;
image_yscale = set_scale;
//idleSpeed is the random movement speed
idleSpeed = 2;
speed = 0;
gravity = 0;
max_speed = 8;
has_collided = 0;
hsp=4;
vsp=4;
isAttacking = false;
damage = 10;
depth = -11; //makes it go in front of player
range = 400; //how far detection goes
//range - how far enemy will drift in either direction
idleRange = 100;
//spawnX and spawnY keep track of where it originated
spawnX = x;
squawnY= y;
//alarm time that sets direction
alarm[0]=.1*room_speed;

image_speed = 0.1;

//ANGLERFISH LIGHT
lightOn = false; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 2;
if (!isAttacking) {
    Xdirection = random_range(spawnX+idleRange, spawnX-idleRange);
    Ydirection = random_range(spawnX+idleRange, spawnX-idleRange);
     if (Xdirection - x &gt; 0){
        image_xscale = -set_scale;
    } else {
        image_xscale = set_scale;
    }
    move_towards_point( Xdirection, Ydirection, idleSpeed );
    //image_angle = point_direction(Xdirection, Ydirection, x, y);
}
    alarm[0] = 1 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sped = 1;

//range-10 makes it never bounce far enough away to not come back to sub
if distance_to_object(submarine) &gt; range-100
    has_collided = 0;

// if light is on
if(global.flashlight_toggle){
    //ANGLERFISH LIGHT
    lightOn = true; 
    isAttacking = true; 
    if(distance_to_object(submarine) &lt; range &amp;&amp; has_collided == 0){
        //has_collided = 0 - thing has not bounced off of submarine (should be going towards sub)
        //has_collided = 1 - thing should bounce off of sub and go in opposite direction
        
        direction = point_direction(x,y, submarine.x, submarine.y);
        hacc = lengthdir_x(speed, direction);//clamp(lengthdir_x(sped, dir),-1,1);
        vacc = lengthdir_y(speed, direction);//clamp(lengthdir_y(sped, dir),-1,1);
        if(hacc&gt; 0){
            image_xscale = -1* set_scale;
        } else{
            image_xscale = set_scale;
        }
        hsp += hacc;
        vsp += vacc;
    
        if (abs(hsp) &gt; max_speed){
            hsp = sign(hsp) * max_speed;
        }
        if (abs(vsp) &gt; max_speed){
            vsp = sign(vsp) * max_speed;
        }
    
        //move sub
        x+=hsp;
        y+=vsp;
    } else if (has_collided == 1){
        
    }
}
else {
   isAttacking = false;
}

    

        


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//direction = -direction;
move_bounce_solid(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="submarine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_message(":(");
//if (isAttacking) {
    //has_collided = 1;
    move_bounce_all(true);
   // motion_set(direction, speed);
//}

//suicide barracuda
if (isAttacking) {
    instance_destroy();
    submarine.hp -= damage;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
