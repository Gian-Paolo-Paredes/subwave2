<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>EEL</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = EEL;
image_speed = .5;

OriginalX = x;
OriginalY=y;
range = 400;

vspeed = 0;
hspeed = 0;
speed = 4;
gravity = 0;
max_speed = 10;
has_collided = 0;
hsp=4;
vsp=4;
//motion_add(random(360), speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var range = 200;
key_space = keyboard_check(vk_space);

//random movement

 // direction = irandom_range(0,360);

//    if (x&gt; OriginalX + range) {
//        motion_set (180, speed);
//        }
//    if (x &lt;OriginalX -range){
//        motion_set(0,speed);
//        }

//    if (y&gt; OriginalY +range){
//        motion_set (180,speed);
//     }
//    if ( y &lt; OriginalY - range){
//     motion_set (0, speed);
//     }

//image change
//sprite_index = EEL;


if(global.flashlight_toggle == false) {
    sprite_index = eel_out;
}


//if light is on, make enemy move toward sub
    if(key_space){
//has_collided = 0 - thing has not bounced off of submarine (should be going towards sub)
//has_collided = 1 - thing should bounce off of sub and go in opposite direction

    if distance_to_object(submarine) &lt; range &amp;&amp; has_collided = 0 {
            move_towards_point(-submarine.x, -submarine.y, 5);
            
            if(keyboard_check(vk_space)){
            sprite_index = EEL;
            }else {
                sprite_index = EEL; // will change depending on lighting
            }

   
     
            //horizontal bounce
            if(place_meeting(x + speed - submarine.speed, y, submarine)) {
                direction = -direction + 180;
                motion_set(direction, speed);
                has_collided = 1;
            }

            //Vertical bounce
            if(place_meeting(x, y + speed - submarine.speed, submarine)) {
                direction = -direction;
                motion_set(direction, speed);
                has_collided = 1;
            }
            
            //WALL COLLISION BELOW
            if ( place_meeting (x+speed,y,obj_wall)){
                direction = -direction + 180;
                motion_set(direction, speed);
                //set to 0 so that enemy can follow sub again once it
                //has bounced off any wall
                has_collided = 0;
            }
        
            if ( place_meeting (x,y+speed,obj_wall)){
                direction = -direction;
                motion_set(direction, speed);
                has_collided = 0;

            }

    }
}
//range-10 makes it never bounce far enough away to not come back to sub
if distance_to_object(submarine) &gt; range-100
    has_collided = 0;
    
//COLLISION WITH WALLS
if ( place_meeting (x+speed,y,obj_wall)){
    
         //horizontal bounce
                direction = -direction + 180;
                motion_set(direction, speed);
              
    }
        
        //vertical Collison
    if ( place_meeting (x,y+speed,obj_wall)){
                direction = -direction;
                motion_set(direction, speed);

        }
        
        

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
